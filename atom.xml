<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Philippe Creux Weblog]]></title>
  <link href="http://pcreux.com/atom.xml" rel="self"/>
  <link href="http://pcreux.com/"/>
  <updated>2013-11-20T16:27:30-08:00</updated>
  <id>http://pcreux.com/</id>
  <author>
    <name><![CDATA[Philippe Creux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Disable / Enable Nagios notifications from command line]]></title>
    <link href="http://pcreux.com/2011/03/18/disable-enable-nagios-notifications-via-command-line-curl/"/>
    <updated>2011-03-18T15:55:30-07:00</updated>
    <id>http://pcreux.com/2011/03/18/disable-enable-nagios-notifications-via-command-line-curl</id>
    <content type="html"><![CDATA[<p>Your a lazy devops, you want to deploy your application in one click BUT you don&rsquo;t want Nagios to send alerts while you&rsquo;re deploying. Solution: disable Nagios notifications while deploying.</p>

<p>Disable Nagios Notifications:
<code>
curl -d "cmd_mod=2&amp;cmd;_typ=11" "http://NAGIOS_HOST/cgi-bin/nagios3/cmd.cgi" -u "USERNAME:PASSWORD"
</code></p>

<p>Re-Enable Nagios Notifications:
<code>
curl -d "cmd_mod=2&amp;cmd;_typ=12" "http://NAGIOS_HOST/cgi-bin/nagios3/cmd.cgi" -u "USERNAME:PASSWORD"
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(My) Cucumber best practices and tips]]></title>
    <link href="http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips/"/>
    <updated>2010-09-06T21:55:21-07:00</updated>
    <id>http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>, I&rsquo;m happy to share my Cucumber best practices and tips!</p>

<p>This article will help you organize, clarify and reduce the size of your cucumber scenarios.</p>

<h2>1. Organize your garden</h2>

<p>Keep your feature files organized by grouping them by business object, then action and context if any.  I put all the feature files in the same directory. For instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bank_account_add.feature
</span><span class='line'>bank_account_delete.feature
</span><span class='line'>user_signup.feature
</span><span class='line'>user_signup_when_invited.feature
</span><span class='line'>user_login.feature</span></code></pre></td></tr></table></div></figure>


<p>The steps specific to the application should be organized by business object as well (<code>bank_account_steps.rb</code>, <code>user_steps.rb</code>&hellip;). Keep the file organized grouping the steps by <code>Given</code> / <code>When</code> / <code>Then</code>.</p>

<p>Do not overload the files generated by Cucumber like <code>step_definitions/web_steps.rb</code> and <code>support/env.rb</code> with your own steps, helpers or setup code. These files are likely to get overwritten when you update Cucumber so store your stuff in your own files.</p>

<h2>2. Custom steps make your scenario DRY and accessible</h2>

<p>Scenarios should have the same lifecyle as your code: Red, Green, <strong>Refactor</strong> to make them DRY and easy to read.</p>

<p>Group multiple steps together. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Given</span> <span class="n">I</span> <span class="n">follow</span> <span class="s2">&quot;Send money&quot;</span>
</span><span class='line'>  <span class="no">When</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s2">&quot;Email&quot;</span> <span class="n">with</span> <span class="s2">&quot;mukmuk@example.com&quot;</span>
</span><span class='line'>  <span class="no">And</span> <span class="n">I</span> <span class="n">fill</span> <span class="k">in</span> <span class="s2">&quot;Amount&quot;</span> <span class="n">with</span> <span class="s2">&quot;10&quot;</span>
</span><span class='line'>  <span class="no">And</span> <span class="n">I</span> <span class="nb">select</span> <span class="s2">&quot;Bank account&quot;</span> <span class="n">from</span> <span class="s2">&quot;Source&quot;</span>
</span><span class='line'>  <span class="no">And</span> <span class="n">I</span> <span class="n">press</span> <span class="s2">&quot;Send&quot;</span>
</span><span class='line'>  <span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="s2">&quot;You&#39;ve sent $10 to mukmuk@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; could be refactored to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Given</span> <span class="n">I</span> <span class="nb">send</span> <span class="s2">&quot;$10&quot;</span> <span class="n">to</span> <span class="s2">&quot;mukmuk@example.com&quot;</span> <span class="n">from</span> <span class="n">my</span> <span class="s2">&quot;Bank account&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This step definition is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="no">Given</span> <span class="sx">%{I send &quot;$amount&quot; to &quot;$email&quot; from my &quot;$source&quot;}</span> <span class="k">do</span> <span class="o">|</span><span class="n">amount</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">source</span><span class="o">|</span>
</span><span class='line'>    <span class="no">Given</span> <span class="sx">%{I follow &quot;Send money&quot;}</span>
</span><span class='line'>    <span class="no">When</span> <span class="sx">%{I fill in &quot;Email&quot; with &quot;</span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="sx">&quot;}</span>
</span><span class='line'>    <span class="no">And</span> <span class="sx">%{I fill in &quot;Amount&quot; with &quot;</span><span class="si">#{</span><span class="n">amount</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span><span class="si">}</span><span class="sx">&quot;}</span>
</span><span class='line'>    <span class="no">And</span> <span class="sx">%{I select &quot;</span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="sx">&quot; from &quot;Source&quot;}</span>
</span><span class='line'>    <span class="no">And</span> <span class="sx">%{I press &quot;Send&quot;}</span>
</span><span class='line'>    <span class="no">Then</span> <span class="sx">%{I should see &quot;You&#39;ve sent $</span><span class="si">#{</span><span class="n">amount</span><span class="si">}</span><span class="sx"> to </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="sx">&quot;}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This step can then be easily reused in other scenario keeping your features DRY. It also decouples the scenario from the UI so that you won&rsquo;t have to change dozens of feature files when the UX guru changes translations or user flows.</p>

<h2>3. Background: setup the DRY way</h2>

<p>Make the feature focus on one business object/action/context and the <a href="http://wiki.github.com/aslakhellesoy/cucumber/background">background</a> will get longer than the scenarios.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  Feature: A user can cancel a transaction unless it&#39;s claimed by the recipient</span>
</span><span class='line'>
</span><span class='line'><span class="nf">    </span><span class="k">Background:</span><span class="nf"></span>
</span><span class='line'><span class="k">      Given </span><span class="nf">I am logged in</span>
</span><span class='line'><span class="nf">      </span><span class="k">And </span><span class="nf">I send &quot;</span><span class="s">$10</span><span class="nf">&quot; to &quot;</span><span class="s">mukmuk@example.com</span><span class="nf">&quot; from my &quot;</span><span class="s">Bank account</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">    </span><span class="k">Scenario:</span><span class="nf"> I can cancel as long as the payment is not claimed</span>
</span><span class='line'><span class="k">      When </span><span class="nf">I cancel my latest transaction</span>
</span><span class='line'><span class="nf">      </span><span class="k">Then </span><span class="nf">I should see a cancellation confirmation</span>
</span><span class='line'>
</span><span class='line'><span class="nf">    </span><span class="k">Scenario:</span><span class="nf"> I can&#39;t cancel once the payment is claimed</span>
</span><span class='line'><span class="k">      Given </span><span class="nf">&quot;</span><span class="s">Mukmuk</span><span class="nf">&quot; claimed the latest transaction</span>
</span><span class='line'><span class="nf">      </span><span class="k">Then </span><span class="nf">I can&#39;t cancel my latest transaction</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Scenario outlines: scenario with variables!</h2>

<p>A <a href="http://wiki.github.com/aslakhellesoy/cucumber/scenario-outlines">scenario outline</a> contains variables allowing you to test multiple context using a truth table. For instance I use them to make sure that validation errors are displayed properly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> Add invalid bank account displays inline errors</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">I follow &quot;</span><span class="s">Add Bank Account</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I fill in &quot;</span><span class="nv">&lt;field&gt;</span><span class="nf">&quot; with &quot;</span><span class="nv">&lt;value&gt;</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Add Bank Account</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I should see the inline error &quot;</span><span class="nv">&lt;error&gt;</span><span class="nf">&quot; for &quot;</span><span class="nv">&lt;field&gt;</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">    </span><span class="k">Examples:</span>
</span><span class='line'><span class="k">      |</span><span class="nv"> field</span><span class="k">   |</span><span class="nv"> value</span><span class="k">         |</span><span class="nv"> error</span><span class="k">                    |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Account</span><span class="k"> |               |</span><span class="s"> Can&#39;t be blank</span><span class="k">           |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Account</span><span class="k"> |</span><span class="s"> Sixty five</span><span class="k">    |</span><span class="s"> Should be 1 to 12 digits</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">      |</span><span class="s"> Account</span><span class="k"> |</span><span class="s"> 1234567890123</span><span class="k"> |</span><span class="s"> Should be 1 to 12 digits</span><span class="k"> |</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. Multi-line step arguments: give your step a table for lunch!</h2>

<p>A step can take a <a href="http://wiki.github.com/aslakhellesoy/cucumber/multiline-step-arguments">multi-line table as an argument</a>. This is a great way to load up a bunch of data or to test the rendering of lists and tables. For instance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  </span><span class="k">Given </span><span class="nf">I sent &quot;</span><span class="s">$25</span><span class="nf">&quot; to &quot;</span><span class="s">mukmuk@example.com</span><span class="nf">&quot; from my &quot;</span><span class="s">Bank account</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">I should see the following transaction history:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> create</span><span class="k">     |</span><span class="s"> complete</span><span class="k">    |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> deposit</span><span class="k">    |</span><span class="s"> in_progress</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> transfer</span><span class="k">   |</span><span class="s"> pending</span><span class="k">     |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> withdrawal</span><span class="k"> |</span><span class="s"> pending</span><span class="k">     |</span>
</span></code></pre></td></tr></table></div></figure>


<p>The step definition looks like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nf">  </span><span class="k">Then </span><span class="nf">&quot;</span><span class="s">I should see the following transaction history:</span><span class="nf">&quot; do |table|</span>
</span><span class='line'><span class="nf">    table.raw.each do</span><span class="k"> |</span><span class="s">event, state</span><span class="k">|</span><span class="s"></span>
</span><span class='line'><span class="s">      page.should have_css(&quot;tr.</span><span class="c">#{event}.#{state}&quot;)</span><span class="s"></span>
</span><span class='line'><span class="s">    end</span>
</span><span class='line'><span class="s">  end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope that these tips will help you growing healthy cucumber features!</p>

<p>Want more? Check out the <a href="http://wiki.github.com/aslakhellesoy/cucumber/">Cucumber wiki</a>, <a href="http://www.engineyard.com/blog/2009/15-expert-tips-for-using-cucumber/">15 Expert Tips for Using Cucumber</a> by <a href="http://www.engineyard.com/blog/author/daveastels/">Dave Astels</a>, <a href="http://elabs.se/blog/15-you-re-cuking-it-wrong">You&rsquo;re Cuking It Wrong</a> by <a href="http://elabs.se/">Elabs</a> and <a href="http://antonymarcano.com/blog/2010/08/youre-almost-cuking-it/">You’re almost cuking it…</a> by <a href="http://antonymarcano.com/Site/Home.html">Antony Marcano</a>. You could also like <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>. :)</p>

<p>Happy BDD!</p>

<blockquote><p>Thanks to <a href="http://wwww.21croissants.com/">Jean-Michel Garnier</a> for reviewing this article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Integrity to play well with Rails 3 and Bundler 1.0]]></title>
    <link href="http://pcreux.com/2010/08/31/get-integrity-to-play-well-with-rails-3-and-bundler-1-0/"/>
    <updated>2010-08-31T15:01:59-07:00</updated>
    <id>http://pcreux.com/2010/08/31/get-integrity-to-play-well-with-rails-3-and-bundler-1-0</id>
    <content type="html"><![CDATA[<p>The latest &ldquo;stable&rdquo; version of Integrity (v22) doesn&rsquo;t play well with Rails 3 (or any other application using bundler 1.0). Basically the Integrity&rsquo;s Gemfile is used in place of the application&rsquo;s Gemfile when running the tests.</p>

<p>With a Rails 3 application you are likely to get:</p>

<pre><code>no such file to load -- rails/all
</code></pre>

<p><img src="http://pcreux.com/images/wp-import/integrity_fail.png" alt="Integrity fails to run with Rails 3 and Bundler 1.0" /></p>

<p>A patched version of integrity v22 for bundler 1.0 is available on <a href="http://github.com/pcreux/integrity/tree/v22-bundler-1.0.0.rc">http://github.com/pcreux/integrity/tree/v22-bundler-1.0.0.rc</a>.</p>

<p>You also need to force your Rails application to use its Gemfile. To do so, update the file <code>/config/boot.rb</code> with the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="c1"># Set up gems listed in the Gemfile.</span>
</span><span class='line'><span class="no">GEMFILE_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../Gemfile&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="no">GEMFILE_PATH</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Force the rails 3 application to use its Gemfile</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;BUNDLE_GEMFILE&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">GEMFILE_PATH</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">setup</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That should make the trick!</p>

<p><img src="http://pcreux.com/images/wp-import/integrity_success.png" alt="Patched Integrity and custom boot.rb makes integrity working with Rails 3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed up RSpec with set()]]></title>
    <link href="http://pcreux.com/2010/05/26/speed-up-your-specs-with-set/"/>
    <updated>2010-05-26T00:33:45-07:00</updated>
    <id>http://pcreux.com/2010/05/26/speed-up-your-specs-with-set</id>
    <content type="html"><![CDATA[<p>I enjoy using the <code>let()</code> method as it makes my specs easier to read and maintain than setting up instance variables in <code>before(:each)</code> blocks. The <code>let()</code> method can be used like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Account</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">{</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="n">account</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_enabled</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;when #disable!&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">account</span><span class="o">.</span><span class="n">disable!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_disabled</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>My main concern was that the block gets evaluated everytime the method is called. In the example above, <code>Factory(:account)</code> will run and create a new record for every single spec.</p>

<p>To increase our specs performances let&rsquo;s refactor this and setup the <em>account</em> in a <code>before(:all)</code> block.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Account</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@account</span> <span class="o">=</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@account</span><span class="o">.</span><span class="n">reload</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <em>account</em> is now setup once before the specs get run. Each spec will be run in a separate transaction to prevent side effects. The <em>account</em> will be rolled back to its initial state before each spec then. Since ActiveRecord is not aware of the rollback we reload the <em>account</em> object from the database every time it&rsquo;s called.</p>

<p>Specs are now faster but I want them to be as pretty as they were. Let&rsquo;s make a little helper called <code>set()</code>.</p>

<p>Sweeeet! You can now write the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Account</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">set</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">{</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The records created by <code>set()</code> will remain in your database. You can use <a href="http://github.com/bmabey/database_cleaner">DatabaseCleaner</a> with the <code>:truncation</code> strategy to clean up your database. So far in RSpec 2.0, <code>before(:all)</code> runs before all <em>describe/context/it</em> while <code>after(:all)</code> runs after every single <em>describe/context/it</em>. Just make sure that you call <code>DatabaseCleaner.clean</code> in a <code>before(:all)</code> or <code>after(:suite)</code> blocks then. :)</p>

<p>I hope you&rsquo;ll enjoy using this little helper. It&rsquo;s very young and it has been tested with RSpec 2 only, so fill free to fill up the comments with enhancements and bug reports!</p>

<p><strong>rspec-set is now available <a href="https://github.com/pcreux/rspec-set">as a gem</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get script/runner back in Rails 3]]></title>
    <link href="http://pcreux.com/2010/05/19/get-back-scriptrunner-in-rails-3-x/"/>
    <updated>2010-05-19T17:19:01-07:00</updated>
    <id>http://pcreux.com/2010/05/19/get-back-scriptrunner-in-rails-3-x</id>
    <content type="html"><![CDATA[<p>EngineYard&rsquo;s chef recipe for DelayedJob requires <code>script/runner</code>. To use this recipe with Rails 3 I&rsquo;ve just made <code>script/runner</code> for Rails 3. Here is the code:</p>

<p>Edit: Fix for rails 3.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(My) RSpec best practices and tips]]></title>
    <link href="http://pcreux.com/2010/03/28/my-rspec-best-practices-and-tips/"/>
    <updated>2010-03-28T19:21:07-07:00</updated>
    <id>http://pcreux.com/2010/03/28/my-rspec-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After a year using RSpec, I&rsquo;m happy to share &ldquo;(My) RSpec Best Practices and Tips&rdquo;. Let&rsquo;s make your specs easier to maintain, less verbose, more structured and covering more cases!</p>

<h2>Use shortcuts <em>specify {}</em>, <em>it {}</em> and <em>subject {}</em></h2>

<p>You think RSpec is verbose? In case your code doesn&rsquo;t need any description, use a <em>specify block</em>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;should be valid&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>can be replaced with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">specify</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpec will generate a nice description text for you when running this expectation. Even better, you can use the <em>it block</em>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:name</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_one</span> <span class="ss">:address</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case the subject is the not the class described, just set it with the <em>subject</em> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">address</span> <span class="p">}</span>
</span><span class='line'><span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Start context with &lsquo;when&rsquo;/&lsquo;with&rsquo; and methods description with &lsquo;#&rsquo;</h2>

<p>Have you ever get a failed test with an incomprehensible error message like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="n">non</span> <span class="n">confirmed</span> <span class="n">confirm</span> <span class="n">email</span> <span class="n">wrong</span> <span class="n">token</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">valid</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start your <em>contexts</em> with <em>when</em> and get nice messages like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="k">when</span> <span class="n">non</span> <span class="n">confirmed</span> <span class="k">when</span> <span class="c1">#confirm_email with wrong token should not be valid</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use RSpec matchers to get meaningful messages</h2>

<p>In case of failure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">specify</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">valid?</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>displays:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;User should == true&#39;</span> <span class="no">FAILED</span>
</span><span class='line'>  <span class="ss">expected</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">got</span><span class="p">:</span> <span class="kp">false</span> <span class="p">(</span><span class="n">using</span> <span class="o">==</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">specify</span> <span class="p">{</span> <span class="n">user</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>displays:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;User should be valid&#39;</span> <span class="no">FAILED</span>
</span><span class='line'>  <span class="n">expected</span> <span class="n">valid?</span> <span class="n">to</span> <span class="k">return</span> <span class="kp">true</span><span class="p">,</span> <span class="n">got</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nice eh?</p>

<h2>Only one expectation per <em>it block</em></h2>

<p>I often see specs where it blocks contain several expectations. This makes your tests harder to read and maintain.</p>

<p>So instead of that&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">DemoMan</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should have expected attributes&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">demo_man</span> <span class="o">=</span> <span class="no">DemoMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">demo_man</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="n">demo_man</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:gender</span>
</span><span class='line'>    <span class="n">demo_man</span><span class="o">.</span><span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">DemoMan</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@demo_man</span> <span class="o">=</span> <span class="no">DemoMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@demo_man</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:name</span>   <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:gender</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">respond_to</span> <span class="ss">:age</span>    <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(Over)use describe and context</h2>

<p>Big specs can be a joy to play with as long as they are ordered and DRY. Use nested <em>describe</em> and <em>context</em> blocks as much as you can, each level adding its own specificity in the before block.
To check your specs are well organized, run them in &lsquo;nested&rsquo; mode (<code>spec spec/my_spec.rb -cf nested</code>).
Using <code>before(:each)</code> in each context and describe blocks will help you set up the environment without repeating yourself. It also enables you to use <em>it {}</em> blocks.</p>

<h3>Bad:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should save when name is not empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Alex&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should not save when name is empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should not be valid when name is empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should be valid when name is not empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Alex&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">be_valid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should give the user a flower when gender is W&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:gender</span> <span class="o">=&gt;</span> <span class="s1">&#39;W&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">present</span><span class="o">.</span><span class="n">should</span> <span class="n">be_a</span> <span class="no">Flower</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should give the user a iMac when gender is M&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:gender</span> <span class="o">=&gt;</span> <span class="s1">&#39;M&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">present</span><span class="o">.</span><span class="n">should</span> <span class="n">be_an</span> <span class="no">IMac</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Good:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;when name empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be_valid</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">specify</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;when name not empty&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Sam&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_valid</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">specify</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="ss">:present</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">present</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when user is a W&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">gender</span> <span class="o">=</span> <span class="s1">&#39;W&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_a</span> <span class="no">Flower</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when user is a M&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="p">{</span> <span class="vi">@user</span><span class="o">.</span><span class="n">gender</span> <span class="o">=</span> <span class="s1">&#39;M&#39;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_an</span> <span class="no">IMac</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test Valid, Edge and Invalid cases</h2>

<p>This is called <em>Boundary value analysis</em>, it&rsquo;s simple and it will help you to cover the most important cases. Just split-up method&rsquo;s input or object&rsquo;s attributes into valid and invalid partitions and test both of them and there boundaries. A method specification might look like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;#month_in_english(month_id)&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;when valid&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return &#39;January&#39; for 1&quot;</span> <span class="c1"># lower boundary</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return &#39;March&#39; for 3&quot;</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return &#39;December&#39; for 12&quot;</span> <span class="c1"># upper boundary</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;when invalid&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return nil for 0&quot;</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return nil for 13&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope this will help you improve your specs. Let me know if I missed anything! :)</p>

<p>You could also be interested in <a href="http://eggsonbread.com/2010/09/06/my-cucumber-best-practices-and-tips/">(My) Cucumber best practices and tips</a> or <a href="https://github.com/pcreux/rspec-set">rspec-set</a> a little gem that helps you speeding up your model specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Rubygems to Ruby Enterprise Edition (REE)]]></title>
    <link href="http://pcreux.com/2010/02/12/migrate-rubygems-to-ruby-enterprise-edition-ree/"/>
    <updated>2010-02-12T14:24:26-08:00</updated>
    <id>http://pcreux.com/2010/02/12/migrate-rubygems-to-ruby-enterprise-edition-ree</id>
    <content type="html"><![CDATA[<p>If you have a server running the default Ruby interpreter (&ldquo;Matz&rsquo;s Ruby Interpreter&rdquo; or &ldquo;Ruby MRI&rdquo;) and you want to switch to <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a> (REE) the following script will help you migrating the gems.</p>

<p>Once you have installed Ruby Enterprise Edition run this script so that REE installs the gems installed on your default ruby environment.</p>

<p>That&rsquo;s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move your Ubuntu system to another computer in 3 simple steps]]></title>
    <link href="http://pcreux.com/2010/01/28/move-ubuntu-to-another-computer-in-3-simple-steps/"/>
    <updated>2010-01-28T18:13:30-08:00</updated>
    <id>http://pcreux.com/2010/01/28/move-ubuntu-to-another-computer-in-3-simple-steps</id>
    <content type="html"><![CDATA[<p>You just got a brand new machine but you won&rsquo;t like to spend hours tuning it to get the same configuration as the one you have used for years?</p>

<p>Let&rsquo;s transfer your Ubuntu configuration and applications to your new computer in three simple steps.</p>

<p>This method is cross-architecture. I moved successfully my configuration and applications from an Ubuntu 9.04 32bit to a 64bit one.</p>

<h2>Prerequisites:</h2>

<p>The same version of Ubuntu is installed on both machines. The architecture (32/64 bit) can be different.</p>

<h2>Step 1: Store the list of installed packages</h2>

<p>Run the following command on the source machine to store the installed packages names in <code>~/pkglist</code>:
<code>sudo dpkg --get-selections | sed "s/.*deinstall//" | sed "s/install$//g" &gt; ~/pkglist</code></p>

<h2>Step 2: Transfer your config</h2>

<p>Use <code>scp</code> or <code>rsync</code> or even a flash drive to transfer your home directory (<code>~/*</code>, <code>~/.*</code>), the source list (<code>/etc/apt/sources.list</code>) and any other files you customized or installed (like apache config under <code>/etc</code> or softwares on <code>/opt</code>) from the source machine to the target one.</p>

<h2>Step 3: Install packages</h2>

<p>On the target machine run the following command in a failsafe terminal session to install your packages:</p>

<p><code>sudo aptitude update &amp;&amp; cat pkglist | xargs sudo aptitude install -y</code></p>

<p>That&rsquo;s all folks!</p>

<p>Log into your new machine and keep working as if you were using the previous one.</p>

<p><img src="http://pcreux.com/images/wp-import/clone-ubuntu.jpg" alt="A freshly transfered Ubuntu install" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jabber-SH — SH console via XMPP/Jabber (GTalk)]]></title>
    <link href="http://pcreux.com/2009/12/16/jabber-sh-e28094-sh-console-via-xmppjabber-gtalk/"/>
    <updated>2009-12-16T22:44:01-08:00</updated>
    <id>http://pcreux.com/2009/12/16/jabber-sh-e28094-sh-console-via-xmppjabber-gtalk</id>
    <content type="html"><![CDATA[<p><img src="http://pcreux.com/images/wp-import/Screenshot-Jabber-SSH.png" alt="Screenshot-Jabber-SH on GTalk" /></p>

<p>I&rsquo;ve just posted the <a href="http://gist.github.com/258561">code of Jabber-SH</a> on GitHub. Jabber-SH is a ruby hack that allows you to administrate a remote computer via a command line through a Jabber client. It’s like SSH via GoogleTalk! :)</p>

<p>I coded it nine month ago then I planned to add some specs, to store the configuration in a yaml file, to make a gem out of it but&hellip; I didn&rsquo;t and I won&rsquo;t get a chance to do that. So <a href="http://gist.github.com/258561">here are</a> the 25 lines of code&hellip; hackish eh?!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top-down and Bottom-up programming illustrated by Mac OS X and Windows]]></title>
    <link href="http://pcreux.com/2009/11/25/top-down-and-bottom-up-programming-illustrated-by-mac-os-x-and-windows/"/>
    <updated>2009-11-25T00:00:49-08:00</updated>
    <id>http://pcreux.com/2009/11/25/top-down-and-bottom-up-programming-illustrated-by-mac-os-x-and-windows</id>
    <content type="html"><![CDATA[<p><strong>Bottom-up programming</strong> starts by developing the data model before designing the user interface. Windows Start/Programs menu illustrates this approach. Since programs shortcuts are stored in the directory <code>Programs</code> the menu displays the content of this directory.</p>

<p><img src="http://pcreux.com/images/wp-import/xp-start.png" alt="Windows XP Start menu" /></p>

<p><strong>Top-down programming</strong> starts by designing the user interface before developing the data model. Mac OS X dock illustrates this approach. As it should be easy for a user to launch an application the dock displays big icons accessible in one click.</p>

<p><img src="http://pcreux.com/images/wp-import/osx-dock.png" alt="Mac OS X Dock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to VIM for Ruby and Rails]]></title>
    <link href="http://pcreux.com/2009/11/16/back-to-vim-for-ruby-and-rails/"/>
    <updated>2009-11-16T09:43:18-08:00</updated>
    <id>http://pcreux.com/2009/11/16/back-to-vim-for-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>I learned to use VIM at the university to administrate linux systems and to develop C++ apps. Then I moved to Java and I enjoyed using an IDE like Netbeans. When I started to play with Ruby and Rails I kept using Netbeans as my editor of choice as it plays <a href="http://netbeans.org/features/ruby/index.html">very well with them</a>.</p>

<p>As I was bored with &ldquo;Up arrow key, End key, Enter key&rdquo; instead of &ldquo;O&rdquo; to insert a new line above my cursor and I wanted to play again with this so old but still alive editor, I installed the plugins: <a href="http://www.vim.org/scripts/script.php?script_id=1567">rails.vim</a> (just great), <a href="http://www.vim.org/scripts/script.php?script_id=1773">haml syntax highlight</a> (I ♡ haml) and <a href="http://blog.infinitered.com/entries/show/8">irblack color scheme</a> (more Textmate like).</p>

<p>With rails.vim, you get just great shortcuts to browse your rails source file. Type <code>:Rmodel your_model_name</code> to edit your model source file — <code>:Rcontroller</code>, <code>:Rview</code>, <code>:Rmigration</code>, <code>:Rjavascript</code>, <code>:Rstylesheet</code>&hellip; work too! It also includes <code>:A</code> (jump to alternate file) and <code>:R</code> (jump to relative file) commands. <code>:A</code> switches between source code and corresponding spec file, <code>:R</code> jumps from model to migration file. The most amazing combo: <code>:AV</code> to open up the alternative file (your spec file usually) in a vertical split window.</p>

<p>I finish up with the two commands I learned to use and love.1) Type <code>ma</code> to &ldquo;mark&rdquo; your cursor position as &lsquo;a&rsquo; then type <code>'a</code> to get back to this position. 2) Use <code>qa</code> to record a macro in &lsquo;a&rsquo;, press q again to stop recording. Then @a to replay it. Using commands to jump to next word / end of line / next something character it can be much faster than making a substitution using regexp or so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to make the front mic working on Ubuntu 9.10 (Dell laptop: Intel Hda soundcard)]]></title>
    <link href="http://pcreux.com/2009/11/12/how-to-make-front-mic-working-on-ubuntu-9-10-dell-laptop-intel-hda-soundcard/"/>
    <updated>2009-11-12T06:42:48-08:00</updated>
    <id>http://pcreux.com/2009/11/12/how-to-make-front-mic-working-on-ubuntu-9-10-dell-laptop-intel-hda-soundcard</id>
    <content type="html"><![CDATA[<p>Ubuntu 9.10 comes with alsa 1.0.20 allowing the front mic to work on a Dell XPS M1530. From the Sound Preferences, select Microphone 2 then fire up a terminal, launch <code>alsamixer -V capture</code> and set the following options and enjoy!</p>

<p><img src="http://pcreux.com/images/wp-import/Screenshot-AlsaMixer.png" alt="Screenshot-AlsaMixer" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 faster than Ruby 1.8?]]></title>
    <link href="http://pcreux.com/2009/10/28/ruby-1-9-faster-than-ruby-1-8/"/>
    <updated>2009-10-28T04:17:42-07:00</updated>
    <id>http://pcreux.com/2009/10/28/ruby-1-9-faster-than-ruby-1-8</id>
    <content type="html"><![CDATA[<p>Today I ran the following script with Ruby 1.8 &amp; Ruby 1.9 to compare their performances:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">bench</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'>  <span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">yield</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Test 1: do things&quot;</span>
</span><span class='line'><span class="n">bench</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;yeho!12&quot;</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>  <span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">||=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Test 2: </span><span class="se">\&quot;</span><span class="s2">stuff</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">bench</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;stuff&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Test 3: &#39;stuff&#39;&quot;</span>
</span><span class='line'><span class="n">bench</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;stuff&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Test 4: :stuff&quot;</span>
</span><span class='line'><span class="n">bench</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:stuff</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby 1.9 performances are promising:</p>

<table>
  <thead>
    <tr>
      <th>Test
      <th>Ruby 1.8 (sec)
      <th>Ruby 1.9 (sec)
      <th>Perf Increase
<tbody>
  <tr>
    <th>Test 1: do things
    <td>1.76
    <td>0.54
    <td>324.40%
  <tr>
    <th>Test 2: &#8220;stuff&#8221;
    <td>0.76
    <td>0.21
    <td>364.53%

  <tr>
    <th>Test 3: &#8216;stuff&#8217;
    <td>0.80
    <td>0.21
    <td>388.91%

  <tr>
    <th>Test 4: :stuff
    <td>0.70
    <td>0.13
    <td>525.98%
</table>


<p>So Ruby 1.9 is 3 to 5 times faster than Ruby 1.8 to run simple operations. I then checked with a small Rails app.</p>

<p>Once I got rubygem installed for Ruby 1.9, the gems I needed installed for Ruby 1.9, the plug-ins I use patched for Ruby 1.9, and my ruby code patched for Ruby 1.9, <em>– yes, it was painful! –</em> I fired: <code>time spec spec</code></p>

<p><strong>Ruby 1.8</strong></p>

<pre><code>$&gt; time spec spec
............................................

Finished in 0.594813 seconds

44 examples, 0 failures
spec spec  2.49s user 0.79s system 93% cpu 3.522 total
</code></pre>

<p><strong>Ruby 1.9</strong></p>

<pre><code>$&gt; time spec spec
............................................

Finished in 0.625589223 seconds

44 examples, 0 failures
spec spec  8.74s user 0.32s system 93% cpu 9.648 total
</code></pre>

<p>Grrrr. Ruby 1.8 &amp; 1.9 both pass the specs in ~0.60 second but Ruby 1.9 takes 8.74 seconds in total vs 2.49 seconds for Ruby 1.8. The same behavior occurs when running a Webrick server via <code>script/server</code>: Ruby 1.9 is 2 times slower than Ruby 1.8 to boot up the server and it handles the requests just as fast as Ruby 1.8.</p>

<p>Any Ruby guru to explain such deceiving results?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How-to fix low volume on Ubuntu (Dell laptop: Intel Hda soundcard)]]></title>
    <link href="http://pcreux.com/2009/09/18/how-to-fix-low-volume-on-ubuntu-dell-laptop-intel-hda-soundcard/"/>
    <updated>2009-09-18T08:30:56-07:00</updated>
    <id>http://pcreux.com/2009/09/18/how-to-fix-low-volume-on-ubuntu-dell-laptop-intel-hda-soundcard</id>
    <content type="html"><![CDATA[<p>It took me a while to find a way to fix it as all the alsa-mixers where set at 100%.</p>

<p>The solution: run <code>alsamixer -D hw:0</code> to display a new mixer called &ldquo;Front&rdquo; set at 70% by default &ndash; shift it to 100% and you can now listen to music or watch a film at a comfortable level!</p>

<p>Ps: If anyone knows how to increase the internal mic input volume and/or make the front mic work on an Dell XPS M1530: I&rsquo;m definitely interested!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New rails plugin to find unused translations]]></title>
    <link href="http://pcreux.com/2009/09/08/new-rails-plugin-to-find-unused-translations/"/>
    <updated>2009-09-08T05:35:30-07:00</updated>
    <id>http://pcreux.com/2009/09/08/new-rails-plugin-to-find-unused-translations</id>
    <content type="html"><![CDATA[<p>A small while ago, I released with <a href="http://twitter.com/lboix">@lboix</a> a simple rails plug-in that displays translations stored in your locale file but not called from your source code. It is called <a href="http://github.com/o2sources/unused_translations/tree/master">unused_translations</a> and it is <a href="http://github.com/o2sources/unused_translations/tree/master">available on GitHub</a>. I hope you&rsquo;ll enjoy it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make acts_as_versioned create new version on demand]]></title>
    <link href="http://pcreux.com/2009/07/29/make-acts_as_versioned-create-new-version-on-demand/"/>
    <updated>2009-07-29T16:46:00-07:00</updated>
    <id>http://pcreux.com/2009/07/29/make-acts_as_versioned-create-new-version-on-demand</id>
    <content type="html"><![CDATA[<p>I use <a href="http://github.com/technoweenie/acts_as_versioned/tree/master">acts_as_versioned</a> to manage versions of Rails models. As I don&rsquo;t want to create a new version of my document everytime I save it (to fix a typo for instance), I added a virtual attribute called <code>save_with_revision</code> to my model and put it into the definition of <code>version_condition_met?</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_accessor</span> <span class="ss">:save_with_revision</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">version_condition_met?</span>
</span><span class='line'>  <span class="vi">@save_with_revision</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="sr">/true|1/</span><span class="o">]</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool&hellip; except that it does not save intermediate updates into the <code>**_versions</code> table. Let say you create document version 1.0, then update it without creating a new version (from <code>v1.1</code> to <code>v1.4</code>) and finally save a new version (<code>v2.0</code>); <code>v1</code> will still be <code>v1.0</code> and not <code>v1.4</code>.</p>

<p>To save intermediate updates into the <code>**_versions</code> table, just add to your model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">after_update</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="n">version_condition_met?</span> <span class="o">&amp;&amp;</span> <span class="n">changed?</span>
</span><span class='line'>    <span class="n">versions</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:last</span><span class="p">)</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope it helps. :)</p>

<p>Anyone with a better solution?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File versioning in Ruby on Rails with Paperclip & acts_as_versioned]]></title>
    <link href="http://pcreux.com/2009/07/23/file-versioning-in-ruby-on-rails-with-paperclip-acts_as_versioned/"/>
    <updated>2009-07-23T12:50:11-07:00</updated>
    <id>http://pcreux.com/2009/07/23/file-versioning-in-ruby-on-rails-with-paperclip-acts_as_versioned</id>
    <content type="html"><![CDATA[<p>This short tutorial shows you how to manage file versioning in Ruby on Rails by making <a href="http://thoughtbot.com/projects/paperclip">Paperclip</a> falling in love with <a href="http://github.com/technoweenie/acts_as_versioned/tree/master">acts_as_versioned</a>. Paperclip &amp; acts_as_versioned are plug-ins for Ruby on Rails: Paperclip manages file upload, acts_as_versioned enables models versioning.</p>

<h2>Patch Paperclip</h2>

<p>I patched Paperclip to keep old files when a new revision is saved. A fork of Paperclip adding the option <code>keep_old_files</code> to make Paperclip working with acts_as_versioned is available here: <a href="http://github.com/pcreux/paperclip/tree/master">http://github.com/pcreux/paperclip/tree/master</a>. You can install it running:</p>

<pre><code>script/plugin install pcreux_paperclip
</code></pre>

<h2>Update your Paperclip + acts_as_versioned model</h2>

<p>Just three things to do:</p>

<ol>
<li>update the url &amp; path to store your files by &lsquo;version&rsquo;</li>
<li>set the option <code>keep_old_files</code> to <code>true</code> when a new version get saved</li>
<li>add the interpolation of <code>:version</code></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Document</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_attached_file</span> <span class="ss">:attachment</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;/system/attachments/:id/:version/:style/:basename.:extension&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;:rails_root/public/system/attachments/:id/:version/:style/:basename.:extension&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:keep_old_files</span> <span class="o">=&gt;</span> <span class="ss">:version_condition_met?</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">acts_as_versioned</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Paperclip</span><span class="o">.</span><span class="n">interpolates</span> <span class="ss">:version</span> <span class="k">do</span> <span class="o">|</span><span class="n">attachement</span><span class="p">,</span> <span class="n">style</span><span class="o">|</span>
</span><span class='line'>    <span class="n">attachement</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">version</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope it helps. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behavior Driven Development in a nutshell]]></title>
    <link href="http://pcreux.com/2009/07/22/behavior-driven-development-in-a-nutshell/"/>
    <updated>2009-07-22T16:42:21-07:00</updated>
    <id>http://pcreux.com/2009/07/22/behavior-driven-development-in-a-nutshell</id>
    <content type="html"><![CDATA[<p>A good development practice is to use automated tests to ensure the application works well and to facilitate refactoring. It is even better to write these unit tests before writing the code: this practice is called <a href="http://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a> (TDD) and it is a great way to check that the code <em>is</em> what it is excepted to <em>be</em>. <a href="http://en.wikipedia.org/wiki/Behavior_driven_development">Behavior Driven Development</a> (BDD) goes a step further as you write <em>specifications</em> describing what the code <em>does</em>.</p>

<p>Behavior Driven Development is more about interactions with the application than just unit testing. It forces the developer to understand the responsibility of the method he is about to write. Using good tools, the specs written to test the application can be used as specifications.</p>

<h2>Ruby BDD frameworks</h2>

<p><a href="http://rspec.info/">RSpec</a> is famous ruby BDD framework that plays with contexts and assertions. It is mainly used to describe the behavior of application code in specific contexts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Calculator</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;switched on&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@calc</span> <span class="o">=</span> <span class="no">Calculator</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">switch_on!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should have a result equal to 0&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@calc</span><span class="o">.</span><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">equal</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These specifications are a good documentation for developers as they focus on the application code. Since BDD encourages collaboration between developers &amp; non-technical participants, we need a tool describing the application at a higher level: <a href="http://cukes.info/">Cucumber</a>, to the rescue!</p>

<p><a href="http://cukes.info/">Cucumber</a> permits to describe how the application should behave via user stories written down in a business-readable language. A scenario looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Given </span><span class="nf">I am on the messages page</span>
</span><span class='line'><span class="k">When </span><span class="nf">I fill in &quot;</span><span class="s">Content</span><span class="nf">&quot; with &quot;</span><span class="s">Hello</span><span class="nf">&quot;</span>
</span><span class='line'><span class="k">And </span><span class="nf">I press &quot;</span><span class="s">Send</span><span class="nf">&quot;</span>
</span><span class='line'><span class="k">Then </span><span class="nf">I should see &quot;</span><span class="s">Message sent!</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These plain-text scenarios can be shared between developers and non-technical participants to validate the application behavior. Each step of this scenario is defined in Ruby to permits to run the scenario against the application and to generate a detailed development-status report.</p>

<h2>BDD process</h2>

<p>The focus of BDD is the language and interactions used in the process of software development. It implies outside-in development starting with User Interface definition to code development. Therefor, you create scenarios for the features you would like to develop and then follow the BDD process:</p>

<p><img src="http://pcreux.com/images/wp-import/bdd.png" alt="BDD process schema" /></p>

<ol>
<li>for each scenario describing a feature</li>
<li>run the scenario – it fails (go red)</li>
<li>define the first step – go red</li>
<li>write down the application code getting the step to pass – go green</li>
<li>refactor the code and repeat steps 4 &amp; 5 for each step until&hellip;</li>
<li>the scenario passes – go green</li>
<li>refactor the application code</li>
</ol>


<p>Once your done, you can move on to the next feature. :)</p>

<p>These scenarios drive the developer into the development process. It forces him to focus on writing down the test or application code to get the current step to pass, before moving on to the next step.  The developer is also gratified every time a step passes and he knows with precision which features work.</p>

<p>I use Behavior Driven Development to develop Ruby on Rails applications. I work with non-technical participants on Cucumber scenario and I can give easily generate a project development status that shows working / pending / not-working scenarios. When switching to &ldquo;development mode&rdquo;, I just focus on getting the next step to pass – my mind is free of thoughts concerning the feature definition &amp; application requirements. I usually get a step to pass in a couple of minute and everytime it occurs, it am gratified of seeing it going green. Finally, the refactor process occuring everytime a step or a scenario pass, the application design is constantly evolving to fit just the requirements: that is <em>emergent design</em>.</p>

<p>Many developers I talked with say that it is hard to write tests before writing the code. I think it is just hard to switch to this method. Try it and the coding process will look easier and your code will get better – just because you will specify before coding instead of doing both at the same time.
  <em>[BDD]: Behavior Driven Development
  </em>[TDD]: Test Driven Development</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubular — Regular expressions editing & testing made easy]]></title>
    <link href="http://pcreux.com/2009/07/16/rubular-e28094-regular-expressions-editing-testing-made-easy/"/>
    <updated>2009-07-16T00:50:28-07:00</updated>
    <id>http://pcreux.com/2009/07/16/rubular-e28094-regular-expressions-editing-testing-made-easy</id>
    <content type="html"><![CDATA[<p>If you use to spend ages building and testing regular expressions, you might be interested in the online expression editor <a href="http://rubular.com">Rubular</a>. Rubular is a handy way to test ruby-based regular expressions as you write them.</p>

<p><img src="http://pcreux.com/images/wp-import/rubular.png" alt="rubular" /></p>

<p>Since the regular expression flavor used in Ruby is &ldquo;Perl Style&rdquo;, you can use this tool to test regular expressions written for PHP (preg function), Python, Javascript etc. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Development in a Nutshell]]></title>
    <link href="http://pcreux.com/2009/07/10/agile-development-in-a-nutshell/"/>
    <updated>2009-07-10T18:44:57-07:00</updated>
    <id>http://pcreux.com/2009/07/10/agile-development-in-a-nutshell</id>
    <content type="html"><![CDATA[<p><img src="http://pcreux.com/images/wp-import/screenshot1.png" alt="Waterfall project Cartoon - Generated from http://www.projectcartoon.com/" /></p>

<p>Funny isn&rsquo;t it? But that is the way it goes in many companies developing software – especially in big companies and on big projects. This is the old school &ndash; but widely used &ndash; <a href="http://en.wikipedia.org/wiki/Waterfall_model">waterfall model</a>. This software development process goes through the phases of Requirements, Design, Development, Testing &amp; Maintenance one after the other. It relies on the dream that once a step is 100% complete, it is also 100% right and it drives us to the delivery of a working software even the one the customer wants. But it doesn&rsquo;t go that way in the software industry: customers don&rsquo;t know what they need and use to ask many useless features, project leaders don&rsquo;t succeed to write down the perfect requirements, analysts spend ages building up software architectures writing down pages of diagrams &ndash; software is definitely one of the most complex artifact humans can build up &ndash; and developers are human too, so they make mistakes too.</p>

<p>The waterfall model is inspired by the industries, therefor by highly structured physical environments in which after-the-fact changes are prohibitively costly. We&rsquo;re writing software and software are virtuals, right? So, you can change the whole architecture without any additional cost &ndash; except the time you spend updating the code. Enlarging an array is not as costly as enlarging a kitchen. Why do we use this development model then? Maybe because it is straightforward to build software like we would build an aircraft – or because people did not read correctly <a href="http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf">the article</a> Winston W. Royce wrote in 1970 where it presents this model and said that it &ldquo;is risky and invites failure&rdquo;. :)</p>

<h2>The solution: Agile methods!</h2>

<p>It is easy and cheap to update software code. At least easier and cheaper than moving the kitchen upstairs. Therefor you can easily <em>try &amp; see</em>. <em>Try</em> to implement a new feature and <em>see</em> if it 1) does work 2) is usefull. The rule of <a href="http://en.wikipedia.org/wiki/Pareto_principle">80/20</a> applies very well in the software industry – for instance 80% of users use less than 20% of a software features. Since <em>try &amp; see</em> looks like random programming I gonna present you some aspects of Agile development.</p>

<p>Many Agile development methods exist and they all follow the <a href="http://agilemanifesto.org/principles.html">twelve principles</a> of the <a href="http://en.wikipedia.org/wiki/Agile_Manifesto">Agile Manifesto</a>. The four main values are:</p>

<ul>
<li><p><strong>Individuals and interactions</strong> over processes and tools</p></li>
<li><p><strong>Working software</strong> over comprehensive documentation</p></li>
<li><p><strong>Customer collaboration</strong> over contract negotiation</p></li>
<li><p><strong>Responding to change</strong> over following a plan</p></li>
</ul>


<p>Interactions, collaboration, embrace change&hellip; looks great isn&#8217;it?! But it&rsquo;s easier to promote cool values than to follow them – and even harder to end up on a working software that suits user needs. To make it working, you have to follow an Agile method and work with people who want to follow it too.</p>

<h2>Scrum — Get Agile!</h2>

<p><a href="http://en.wikipedia.org/wiki/Scrum_(development">Scrum</a>) is an Agile development methods. It has been designed for management of software development projects but can be usedas a general project management approach.</p>

<h3>Roles</h3>

<p>Scrum defines three main roles in a <em>Scrum team</em>:</p>

<ul>
<li><p>the <em>Scrum Master</em>, it maintains the process</p></li>
<li><p>the <em>Product Owner</em>, usually the customer ‑ it sets the directions of the software</p></li>
<li><p>the <em>Team</em>, it designs, develops, tests &amp; deploys the software. The team is self-managed.</p></li>
</ul>


<h3>Scrum init</h3>

<p>The scrum process is initialized with the creation of the <em>product backlog</em>. The product backlog can be seen as a wish list containing all the features the software should have. The Scrum team (including the Scrum master &amp; the Product owner) is involved in the creation of the product backlog. The Product backlog is then reviewed and the features it contains are prioritized.</p>

<h3>Three&hellip; Two&hellip; One&hellip; Ignition!</h3>

<p>Once the product backlog is ready, the project is launched. The software development will be managed via small iterations from one to four weeks. At the end of each iteration, a new release of the software featuring new or updated features is deployed.</p>

<p>The following schema shows the iterative process:</p>

<p><img src="http://pcreux.com/images/wp-import/Scrum_process.png" alt="Scrum_process" /></p>

<p>Each iterations (also called &ldquo;sprint&rdquo;) starts with the creation of a <em>sprint backlog</em>. The sprint backlog contains features coming from the product backlog which will be developed during the iteration. Everyday, a project status meeting called the Scrum occurs. The meeting is time-boxed to 15 minutes and everybody answers the three questions:</p>

<ul>
<li><p>What have you done since yesterday?</p></li>
<li><p>What are you planning to do today?</p></li>
<li><p>Do you have any problem preventing you from accomplishing your goal?</p></li>
</ul>


<p>At the end of each iteration, a new release of the software is deployed. The Product owner reviews this new release in order to validate it and to decide what the team has to developed or to refactor next.</p>

<p>The Scrum method does not describe the way developers code &amp; test the application within a sprint allowing you to choose a method that suits your needs. The one I use is <a href="http://en.wikipedia.org/wiki/Behaviour_driven_development">Behaviour Driven Development</a>: it works as a charm with Scrum and it will be the topic of a future post.</p>

<p>I am Scrum master on a project involving four developers for the web agency <a href="http://blog.o2sources.com">O2Sources</a>. We follow the Scrum method but we do not use every concepts and tools it offers like <a href="http://en.wikipedia.org/wiki/Scrum_(development">BurnDown chart</a>#Burn_down) or <a href="http://en.wikipedia.org/wiki/Scrum_(development">Pig &amp; Chicken roles</a>#Roles). I didn&rsquo;t talk about them in this post to keep it short and because I wanted to talk about concepts I know, I use and which works. Don&rsquo;t hesitate to discover them by yourself – the <a href="http://en.wikipedia.org/wiki/Scrum_(development">wikipedia page of Scrum</a>) could be a good start.</p>

<p>The project I am working on for <a href="http://blog.o2sources.com">O2Sources</a> is called <em>Townce</em>. It is a Collaborative Working Web Application coded in <a href="http://rubyonrails.org/">Ruby on Rails</a>. We follow the principles of Scrum &amp;  Behavior Driven Development methods to manage its development. Thanks to the Agile method Scrum, we deploy new releases every one to two weeks. Every release is reviewed to adjust the design in oder to make it more intuitive, to develop only essential features and to refactor the code. To see our baby evolve one week after the other could not be possible without the use of great methods and tools like Scrum, Behavior Driven Development, Ruby on Rails, <a href="http://cukes.info/">Cucumber</a>, <a href="http://rspec.info/">RSpec</a>&hellip; but these are other topics.</p>
]]></content>
  </entry>
  
</feed>
