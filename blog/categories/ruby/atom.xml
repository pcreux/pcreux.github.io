<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Philippe Creux Weblog]]></title>
  <link href="http://pcreux.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://pcreux.com/"/>
  <updated>2013-11-20T16:27:30-08:00</updated>
  <id>http://pcreux.com/</id>
  <author>
    <name><![CDATA[Philippe Creux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(My) Cucumber best practices and tips]]></title>
    <link href="http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips/"/>
    <updated>2010-09-06T21:55:21-07:00</updated>
    <id>http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>, I&rsquo;m happy to share my Cucumber best practices and tips!</p>

<p>This article will help you organize, clarify and reduce the size of your cucumber scenarios.</p>

<h2>1. Organize your garden</h2>

<p>Keep your feature files organized by grouping them by business object, then action and context if any.  I put all the feature files in the same directory. For instance:</p>

<p><code>
bank_account_add.feature
bank_account_delete.feature
user_signup.feature
user_signup_when_invited.feature
user_login.feature
</code></p>

<p>The steps specific to the application should be organized by business object as well (<code>bank_account_steps.rb</code>, <code>user_steps.rb</code>&hellip;). Keep the file organized grouping the steps by <code>Given</code> / <code>When</code> / <code>Then</code>.</p>

<p>Do not overload the files generated by Cucumber like <code>step_definitions/web_steps.rb</code> and <code>support/env.rb</code> with your own steps, helpers or setup code. These files are likely to get overwritten when you update Cucumber so store your stuff in your own files.</p>

<h2>2. Custom steps make your scenario DRY and accessible</h2>

<p>Scenarios should have the same lifecyle as your code: Red, Green, <strong>Refactor</strong> to make them DRY and easy to read.</p>

<p>Group multiple steps together. For instance:
<code>ruby
  Given I follow "Send money"
  When I fill in "Email" with "mukmuk@example.com"
  And I fill in "Amount" with "10"
  And I select "Bank account" from "Source"
  And I press "Send"
  Then I should see "You've sent $10 to mukmuk@example.com"
</code>
&hellip; could be refactored to:
<code>ruby
  Given I send "$10" to "mukmuk@example.com" from my "Bank account"
</code></p>

<p>This step definition is the following:
```ruby
  Given %{I send &ldquo;$amount&rdquo; to &ldquo;$email&rdquo; from my &ldquo;$source&rdquo;} do |amount, email, source|</p>

<pre><code>Given %{I follow "Send money"}
When %{I fill in "Email" with "#{email}"}
And %{I fill in "Amount" with "#{amount.delete('$')}"}
And %{I select "#{source}" from "Source"}
And %{I press "Send"}
Then %{I should see "You've sent $#{amount} to #{email}"}
</code></pre>

<p>  end
```</p>

<p>This step can then be easily reused in other scenario keeping your features DRY. It also decouples the scenario from the UI so that you won&rsquo;t have to change dozens of feature files when the UX guru changes translations or user flows.</p>

<h2>3. Background: setup the DRY way</h2>

<p>Make the feature focus on one business object/action/context and the <a href="http://wiki.github.com/aslakhellesoy/cucumber/background">background</a> will get longer than the scenarios.</p>

<p>```cucumber
  Feature: A user can cancel a transaction unless it&rsquo;s claimed by the recipient</p>

<pre><code>Background:
  Given I am logged in
  And I send "$10" to "mukmuk@example.com" from my "Bank account"

Scenario: I can cancel as long as the payment is not claimed
  When I cancel my latest transaction
  Then I should see a cancellation confirmation

Scenario: I can't cancel once the payment is claimed
  Given "Mukmuk" claimed the latest transaction
  Then I can't cancel my latest transaction
</code></pre>

<p>```</p>

<h2>4. Scenario outlines: scenario with variables!</h2>

<p>A <a href="http://wiki.github.com/aslakhellesoy/cucumber/scenario-outlines">scenario outline</a> contains variables allowing you to test multiple context using a truth table. For instance I use them to make sure that validation errors are displayed properly:</p>

<p>```cucumber
  Scenario Outline: Add invalid bank account displays inline errors</p>

<pre><code>Given I follow "Add Bank Account"
When I fill in "&lt;field&gt;" with "&lt;value&gt;"
And I press "Add Bank Account"
And I should see the inline error "&lt;error&gt;" for "&lt;field&gt;"

Examples:
  | field   | value         | error                    |
  | Account |               | Can't be blank           |
  | Account | Sixty five    | Should be 1 to 12 digits |
  | Account | 1234567890123 | Should be 1 to 12 digits |
</code></pre>

<p>```</p>

<h2>5. Multi-line step arguments: give your step a table for lunch!</h2>

<p>A step can take a <a href="http://wiki.github.com/aslakhellesoy/cucumber/multiline-step-arguments">multi-line table as an argument</a>. This is a great way to load up a bunch of data or to test the rendering of lists and tables. For instance:</p>

<p>```cucumber
  Given I sent &ldquo;$25&rdquo; to &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6d;&#x75;&#x6b;&#109;&#x75;&#107;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x6d;&#x75;&#x6b;&#109;&#x75;&#107;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a>&rdquo; from my &ldquo;Bank account&rdquo;
  Then I should see the following transaction history:</p>

<pre><code>| create     | complete    |
| deposit    | in_progress |
| transfer   | pending     |
| withdrawal | pending     |
</code></pre>

<p>```</p>

<p>The step definition looks like the following:</p>

<p>```cucumber
  Then &ldquo;I should see the following transaction history:&rdquo; do |table|</p>

<pre><code>table.raw.each do |event, state|
  page.should have_css("tr.#{event}.#{state}")
end
</code></pre>

<p>  end
```</p>

<p>I hope that these tips will help you growing healthy cucumber features!</p>

<p>Want more? Check out the <a href="http://wiki.github.com/aslakhellesoy/cucumber/">Cucumber wiki</a>, <a href="http://www.engineyard.com/blog/2009/15-expert-tips-for-using-cucumber/">15 Expert Tips for Using Cucumber</a> by <a href="http://www.engineyard.com/blog/author/daveastels/">Dave Astels</a>, <a href="http://elabs.se/blog/15-you-re-cuking-it-wrong">You&rsquo;re Cuking It Wrong</a> by <a href="http://elabs.se/">Elabs</a> and <a href="http://antonymarcano.com/blog/2010/08/youre-almost-cuking-it/">You’re almost cuking it…</a> by <a href="http://antonymarcano.com/Site/Home.html">Antony Marcano</a>. You could also like <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>. :)</p>

<p>Happy BDD!</p>

<blockquote><p>Thanks to <a href="http://wwww.21croissants.com/">Jean-Michel Garnier</a> for reviewing this article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get Integrity to play well with Rails 3 and Bundler 1.0]]></title>
    <link href="http://pcreux.com/2010/08/31/get-integrity-to-play-well-with-rails-3-and-bundler-1-0/"/>
    <updated>2010-08-31T15:01:59-07:00</updated>
    <id>http://pcreux.com/2010/08/31/get-integrity-to-play-well-with-rails-3-and-bundler-1-0</id>
    <content type="html"><![CDATA[<p>The latest &ldquo;stable&rdquo; version of Integrity (v22) doesn&rsquo;t play well with Rails 3 (or any other application using bundler 1.0). Basically the Integrity&rsquo;s Gemfile is used in place of the application&rsquo;s Gemfile when running the tests.</p>

<p>With a Rails 3 application you are likely to get:</p>

<pre><code>no such file to load -- rails/all
</code></pre>

<p><img src="/images/wp-import/integrity_fail.png" alt="Integrity fails to run with Rails 3 and Bundler 1.0" /></p>

<p>A patched version of integrity v22 for bundler 1.0 is available on <a href="http://github.com/pcreux/integrity/tree/v22-bundler-1.0.0.rc">http://github.com/pcreux/integrity/tree/v22-bundler-1.0.0.rc</a>.</p>

<p>You also need to force your Rails application to use its Gemfile. To do so, update the file <code>/config/boot.rb</code> with the following:
```ruby
require &lsquo;rubygems&rsquo;</p>

<h1>Set up gems listed in the Gemfile.</h1>

<p>GEMFILE_PATH = File.expand_path(&lsquo;../../Gemfile&rsquo;, <strong>FILE</strong>)
if File.exist?(GEMFILE_PATH)
  # Force the rails 3 application to use its Gemfile
  ENV[&lsquo;BUNDLE_GEMFILE&rsquo;] = GEMFILE_PATH
  require &lsquo;bundler&rsquo;
  Bundler.setup
end
```</p>

<p>That should make the trick!</p>

<p><img src="/images/wp-import/integrity_success.png" alt="Patched Integrity and custom boot.rb makes integrity working with Rails 3" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(My) RSpec best practices and tips]]></title>
    <link href="http://pcreux.com/2010/03/28/my-rspec-best-practices-and-tips/"/>
    <updated>2010-03-28T19:21:07-07:00</updated>
    <id>http://pcreux.com/2010/03/28/my-rspec-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After a year using RSpec, I&rsquo;m happy to share &ldquo;(My) RSpec Best Practices and Tips&rdquo;. Let&rsquo;s make your specs easier to maintain, less verbose, more structured and covering more cases!</p>

<h2>Use shortcuts <em>specify {}</em>, <em>it {}</em> and <em>subject {}</em></h2>

<p>You think RSpec is verbose? In case your code doesn&rsquo;t need any description, use a <em>specify block</em>!
<code>ruby
it "should be valid" do
  @user.should be_valid
end
</code>
can be replaced with</p>

<p><code>ruby
specify { @user.should be_valid }
</code></p>

<p>RSpec will generate a nice description text for you when running this expectation. Even better, you can use the <em>it block</em>!</p>

<p><code>ruby
describe User do
  it { should validate_presence_of :name }
  it { should have_one :address }
end
</code></p>

<p>In case the subject is the not the class described, just set it with the <em>subject</em> method:
<code>ruby
subject { @user.address }
it { should be_valid }
</code></p>

<h2>Start context with &lsquo;when&rsquo;/&lsquo;with&rsquo; and methods description with &lsquo;#&rsquo;</h2>

<p>Have you ever get a failed test with an incomprehensible error message like:
<code>
User non confirmed confirm email wrong token should not be valid
</code></p>

<p>Start your <em>contexts</em> with <em>when</em> and get nice messages like:
<code>
User when non confirmed when #confirm_email with wrong token should not be valid
</code></p>

<h2>Use RSpec matchers to get meaningful messages</h2>

<p>In case of failure
<code>ruby
specify { user.valid?.should == true }
</code></p>

<p>displays:</p>

<p><code>
'User should == true' FAILED
  expected: true,
  got: false (using ==)
</code></p>

<p>While</p>

<p><code>
specify { user.should be_valid }
</code>
displays:</p>

<p><code>
'User should be valid' FAILED
  expected valid? to return true, got false
</code></p>

<p>Nice eh?</p>

<h2>Only one expectation per <em>it block</em></h2>

<p>I often see specs where it blocks contain several expectations. This makes your tests harder to read and maintain.</p>

<p>So instead of that&hellip;
```ruby
describe DemoMan do
  it &ldquo;should have expected attributes&rdquo; do</p>

<pre><code>demo_man = DemoMan.new
demo_man.should respond_to :name
demo_man.should respond_to :gender
demo_man.should respond_to :age
</code></pre>

<p>  end
end
```</p>

<p>&hellip; do this:</p>

<p>```ruby
describe DemoMan do
  before(:all) do</p>

<pre><code>@demo_man = DemoMan.new
</code></pre>

<p>  end</p>

<p>  subject { @demo_man }</p>

<p>  it { should respond_to :name   }
  it { should respond_to :gender }
  it { should respond_to :age    }
end
```</p>

<h2>(Over)use describe and context</h2>

<p>Big specs can be a joy to play with as long as they are ordered and DRY. Use nested <em>describe</em> and <em>context</em> blocks as much as you can, each level adding its own specificity in the before block.
To check your specs are well organized, run them in &lsquo;nested&rsquo; mode (<code>spec spec/my_spec.rb -cf nested</code>).
Using <code>before(:each)</code> in each context and describe blocks will help you set up the environment without repeating yourself. It also enables you to use <em>it {}</em> blocks.</p>

<h3>Bad:</h3>

<p>```ruby
describe User do</p>

<p>  it &ldquo;should save when name is not empty&rdquo; do</p>

<pre><code>User.new(:name =&gt; 'Alex').save.should == true
</code></pre>

<p>  end</p>

<p>  it &ldquo;should not save when name is empty&rdquo; do</p>

<pre><code>User.new.save.should == false
</code></pre>

<p>  end</p>

<p>  it &ldquo;should not be valid when name is empty&rdquo; do</p>

<pre><code>User.new.should_not be_valid
</code></pre>

<p>  end</p>

<p>  it &ldquo;should be valid when name is not empty&rdquo; do</p>

<pre><code>User.new(:name =&gt; 'Alex').should be_valid
</code></pre>

<p>  end</p>

<p>  it &ldquo;should give the user a flower when gender is W&rdquo; do</p>

<pre><code>User.new(:gender =&gt; 'W').present.should be_a Flower
</code></pre>

<p>  end</p>

<p>  it &ldquo;should give the user a iMac when gender is M&rdquo; do</p>

<pre><code>User.new(:gender =&gt; 'M').present.should be_an IMac
</code></pre>

<p>  end
end
```</p>

<h3>Good:</h3>

<p>```ruby
describe User do
  before { @user = User.new }</p>

<p>  subject { @user }</p>

<p>  context &ldquo;when name empty&rdquo; do</p>

<pre><code>it { should not be_valid }
specify { @user.save.should == false }
</code></pre>

<p>  end</p>

<p>  context &ldquo;when name not empty&rdquo; do</p>

<pre><code>before { @user.name = 'Sam' }

it { should be_valid }
specify { @user.save.should == true }
</code></pre>

<p>  end</p>

<p>  describe :present do</p>

<pre><code>subject { @user.present }

context "when user is a W" do
  before { @user.gender = 'W' }

  it { should be_a Flower }
end

context "when user is a M" do
  before { @user.gender = 'M' }

  it { should be_an IMac }
end
</code></pre>

<p>  end
end
```</p>

<h2>Test Valid, Edge and Invalid cases</h2>

<p>This is called <em>Boundary value analysis</em>, it&rsquo;s simple and it will help you to cover the most important cases. Just split-up method&rsquo;s input or object&rsquo;s attributes into valid and invalid partitions and test both of them and there boundaries. A method specification might look like that:</p>

<p>```ruby
describe &ldquo;#month_in_english(month_id)&rdquo; do
  context &ldquo;when valid&rdquo; do</p>

<pre><code>it "should return 'January' for 1" # lower boundary
it "should return 'March' for 3"
it "should return 'December' for 12" # upper boundary
</code></pre>

<p>  context &ldquo;when invalid&rdquo; do</p>

<pre><code>it "should return nil for 0"
it "should return nil for 13"
</code></pre>

<p>  end
end
```</p>

<p>I hope this will help you improve your specs. Let me know if I missed anything! :)</p>

<p>You could also be interested in <a href="http://eggsonbread.com/2010/09/06/my-cucumber-best-practices-and-tips/">(My) Cucumber best practices and tips</a> or <a href="https://github.com/pcreux/rspec-set">rspec-set</a> a little gem that helps you speeding up your model specs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrate Rubygems to Ruby Enterprise Edition (REE)]]></title>
    <link href="http://pcreux.com/2010/02/12/migrate-rubygems-to-ruby-enterprise-edition-ree/"/>
    <updated>2010-02-12T14:24:26-08:00</updated>
    <id>http://pcreux.com/2010/02/12/migrate-rubygems-to-ruby-enterprise-edition-ree</id>
    <content type="html"><![CDATA[<p>If you have a server running the default Ruby interpreter (&ldquo;Matz&rsquo;s Ruby Interpreter&rdquo; or &ldquo;Ruby MRI&rdquo;) and you want to switch to <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a> (REE) the following script will help you migrating the gems.</p>

<p>Once you have installed Ruby Enterprise Edition run this script so that REE installs the gems installed on your default ruby environment.</p>

<p>That&rsquo;s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9 faster than Ruby 1.8?]]></title>
    <link href="http://pcreux.com/2009/10/28/ruby-1-9-faster-than-ruby-1-8/"/>
    <updated>2009-10-28T04:17:42-07:00</updated>
    <id>http://pcreux.com/2009/10/28/ruby-1-9-faster-than-ruby-1-8</id>
    <content type="html"><![CDATA[<p>Today I ran the following script with Ruby 1.8 &amp; Ruby 1.9 to compare their performances:</p>

<p>```ruby
def bench
  start = Time.now
  1000000.times do</p>

<pre><code>yield
</code></pre>

<p>  end
  puts Time.now &ndash; start
end</p>

<p>puts &ldquo;Test 1: do things&rdquo;
bench {
  &ldquo;yeho!12&rdquo;.next
  rand(100)
  i ||= 1
  i = i + 1
}</p>

<p>puts &ldquo;Test 2: \"stuff\&rdquo;&ldquo;
bench {
  "stuff&rdquo;
}</p>

<p>puts &ldquo;Test 3: &lsquo;stuff&rsquo;&rdquo;
bench {
  &lsquo;stuff&rsquo;
}</p>

<p>puts &ldquo;Test 4: :stuff&rdquo;
bench {
  :stuff
}
```</p>

<p>Ruby 1.9 performances are promising:</p>

<table>
  <thead>
    <tr>
      <th>Test
      <th>Ruby 1.8 (sec)
      <th>Ruby 1.9 (sec)
      <th>Perf Increase
<tbody>
  <tr>
    <th>Test 1: do things
    <td>1.76
    <td>0.54
    <td>324.40%
  <tr>
    <th>Test 2: "stuff"
    <td>0.76
    <td>0.21
    <td>364.53%

  <tr>
    <th>Test 3: 'stuff'
    <td>0.80
    <td>0.21
    <td>388.91%

  <tr>
    <th>Test 4: :stuff
    <td>0.70
    <td>0.13
    <td>525.98%
</table>


<p>So Ruby 1.9 is 3 to 5 times faster than Ruby 1.8 to run simple operations. I then checked with a small Rails app.</p>

<p>Once I got rubygem installed for Ruby 1.9, the gems I needed installed for Ruby 1.9, the plug-ins I use patched for Ruby 1.9, and my ruby code patched for Ruby 1.9, <em>– yes, it was painful! –</em> I fired: <code>time spec spec</code></p>

<p><strong>Ruby 1.8</strong></p>

<pre><code>$&gt; time spec spec
............................................

Finished in 0.594813 seconds

44 examples, 0 failures
spec spec  2.49s user 0.79s system 93% cpu 3.522 total
</code></pre>

<p><strong>Ruby 1.9</strong></p>

<pre><code>$&gt; time spec spec
............................................

Finished in 0.625589223 seconds

44 examples, 0 failures
spec spec  8.74s user 0.32s system 93% cpu 9.648 total
</code></pre>

<p>Grrrr. Ruby 1.8 &amp; 1.9 both pass the specs in ~0.60 second but Ruby 1.9 takes 8.74 seconds in total vs 2.49 seconds for Ruby 1.8. The same behavior occurs when running a Webrick server via <code>script/server</code>: Ruby 1.9 is 2 times slower than Ruby 1.8 to boot up the server and it handles the requests just as fast as Ruby 1.8.</p>

<p>Any Ruby guru to explain such deceiving results?</p>
]]></content>
  </entry>
  
</feed>
