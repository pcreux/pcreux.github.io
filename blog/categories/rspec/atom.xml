<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSpec | Philippe Creux Weblog]]></title>
  <link href="http://pcreux.github.io/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://pcreux.github.io/"/>
  <updated>2013-12-05T13:07:22-08:00</updated>
  <id>http://pcreux.github.io/</id>
  <author>
    <name><![CDATA[Philippe Creux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed up RSpec with set()]]></title>
    <link href="http://pcreux.github.io/2010/05/26/speed-up-your-specs-with-set/"/>
    <updated>2010-05-26T00:33:45-07:00</updated>
    <id>http://pcreux.github.io/2010/05/26/speed-up-your-specs-with-set</id>
    <content type="html"><![CDATA[<p>I enjoy using the <code>let()</code> method as it makes my specs easier to read and maintain than setting up instance variables in <code>before(:each)</code> blocks. The <code>let()</code> method can be used like this:</p>

<p>```ruby
describe Account do
  let(:account) { Factory(:account) }</p>

<p>  subject { account }</p>

<p>  it { should be_enabled }</p>

<p>  context &ldquo;when #disable!&rdquo; do</p>

<pre><code>before do
  account.disable!
end

it { should be_disabled }
</code></pre>

<p>  end
end
```</p>

<p>My main concern was that the block gets evaluated everytime the method is called. In the example above, <code>Factory(:account)</code> will run and create a new record for every single spec.</p>

<p>To increase our specs performances let&rsquo;s refactor this and setup the <em>account</em> in a <code>before(:all)</code> block.</p>

<p>```ruby
describe Account do
  before(:all) do</p>

<pre><code>@account = Factory(:account)
</code></pre>

<p>  end</p>

<p>  let(:account) { @account.reload }
  #&hellip;
end
```</p>

<p>The <em>account</em> is now setup once before the specs get run. Each spec will be run in a separate transaction to prevent side effects. The <em>account</em> will be rolled back to its initial state before each spec then. Since ActiveRecord is not aware of the rollback we reload the <em>account</em> object from the database every time it&rsquo;s called.</p>

<p>Specs are now faster but I want them to be as pretty as they were. Let&rsquo;s make a little helper called <code>set()</code>.</p>

<p>Sweeeet! You can now write the following:</p>

<p>```ruby
describe Account do
  set(:account) { Factory(:account) }</p>

<p>  #&hellip;
end
```</p>

<p>The records created by <code>set()</code> will remain in your database. You can use <a href="http://github.com/bmabey/database_cleaner">DatabaseCleaner</a> with the <code>:truncation</code> strategy to clean up your database. So far in RSpec 2.0, <code>before(:all)</code> runs before all <em>describe/context/it</em> while <code>after(:all)</code> runs after every single <em>describe/context/it</em>. Just make sure that you call <code>DatabaseCleaner.clean</code> in a <code>before(:all)</code> or <code>after(:suite)</code> blocks then. :)</p>

<p>I hope you&rsquo;ll enjoy using this little helper. It&rsquo;s very young and it has been tested with RSpec 2 only, so fill free to fill up the comments with enhancements and bug reports!</p>

<p><strong>rspec-set is now available <a href="https://github.com/pcreux/rspec-set">as a gem</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[(My) RSpec best practices and tips]]></title>
    <link href="http://pcreux.github.io/2010/03/28/my-rspec-best-practices-and-tips/"/>
    <updated>2010-03-28T19:21:07-07:00</updated>
    <id>http://pcreux.github.io/2010/03/28/my-rspec-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After a year using RSpec, I&rsquo;m happy to share &ldquo;(My) RSpec Best Practices and Tips&rdquo;. Let&rsquo;s make your specs easier to maintain, less verbose, more structured and covering more cases!</p>

<h2>Use shortcuts <em>specify {}</em>, <em>it {}</em> and <em>subject {}</em></h2>

<p>You think RSpec is verbose? In case your code doesn&rsquo;t need any description, use a <em>specify block</em>!
<code>ruby
it "should be valid" do
  @user.should be_valid
end
</code>
can be replaced with</p>

<p><code>ruby
specify { @user.should be_valid }
</code></p>

<p>RSpec will generate a nice description text for you when running this expectation. Even better, you can use the <em>it block</em>!</p>

<p><code>ruby
describe User do
  it { should validate_presence_of :name }
  it { should have_one :address }
end
</code></p>

<p>In case the subject is the not the class described, just set it with the <em>subject</em> method:
<code>ruby
subject { @user.address }
it { should be_valid }
</code></p>

<h2>Start context with &lsquo;when&rsquo;/&lsquo;with&rsquo; and methods description with &lsquo;#&rsquo;</h2>

<p>Have you ever get a failed test with an incomprehensible error message like:
<code>
User non confirmed confirm email wrong token should not be valid
</code></p>

<p>Start your <em>contexts</em> with <em>when</em> and get nice messages like:
<code>
User when non confirmed when #confirm_email with wrong token should not be valid
</code></p>

<h2>Use RSpec matchers to get meaningful messages</h2>

<p>In case of failure
<code>ruby
specify { user.valid?.should == true }
</code></p>

<p>displays:</p>

<p><code>
'User should == true' FAILED
  expected: true,
  got: false (using ==)
</code></p>

<p>While</p>

<p><code>
specify { user.should be_valid }
</code>
displays:</p>

<p><code>
'User should be valid' FAILED
  expected valid? to return true, got false
</code></p>

<p>Nice eh?</p>

<h2>Only one expectation per <em>it block</em></h2>

<p>I often see specs where it blocks contain several expectations. This makes your tests harder to read and maintain.</p>

<p>So instead of that&hellip;
```ruby
describe DemoMan do
  it &ldquo;should have expected attributes&rdquo; do</p>

<pre><code>demo_man = DemoMan.new
demo_man.should respond_to :name
demo_man.should respond_to :gender
demo_man.should respond_to :age
</code></pre>

<p>  end
end
```</p>

<p>&hellip; do this:</p>

<p>```ruby
describe DemoMan do
  before(:all) do</p>

<pre><code>@demo_man = DemoMan.new
</code></pre>

<p>  end</p>

<p>  subject { @demo_man }</p>

<p>  it { should respond_to :name   }
  it { should respond_to :gender }
  it { should respond_to :age    }
end
```</p>

<h2>(Over)use describe and context</h2>

<p>Big specs can be a joy to play with as long as they are ordered and DRY. Use nested <em>describe</em> and <em>context</em> blocks as much as you can, each level adding its own specificity in the before block.
To check your specs are well organized, run them in &lsquo;nested&rsquo; mode (<code>spec spec/my_spec.rb -cf nested</code>).
Using <code>before(:each)</code> in each context and describe blocks will help you set up the environment without repeating yourself. It also enables you to use <em>it {}</em> blocks.</p>

<h3>Bad:</h3>

<p>```ruby
describe User do</p>

<p>  it &ldquo;should save when name is not empty&rdquo; do</p>

<pre><code>User.new(:name =&gt; 'Alex').save.should == true
</code></pre>

<p>  end</p>

<p>  it &ldquo;should not save when name is empty&rdquo; do</p>

<pre><code>User.new.save.should == false
</code></pre>

<p>  end</p>

<p>  it &ldquo;should not be valid when name is empty&rdquo; do</p>

<pre><code>User.new.should_not be_valid
</code></pre>

<p>  end</p>

<p>  it &ldquo;should be valid when name is not empty&rdquo; do</p>

<pre><code>User.new(:name =&gt; 'Alex').should be_valid
</code></pre>

<p>  end</p>

<p>  it &ldquo;should give the user a flower when gender is W&rdquo; do</p>

<pre><code>User.new(:gender =&gt; 'W').present.should be_a Flower
</code></pre>

<p>  end</p>

<p>  it &ldquo;should give the user a iMac when gender is M&rdquo; do</p>

<pre><code>User.new(:gender =&gt; 'M').present.should be_an IMac
</code></pre>

<p>  end
end
```</p>

<h3>Good:</h3>

<p>```ruby
describe User do
  before { @user = User.new }</p>

<p>  subject { @user }</p>

<p>  context &ldquo;when name empty&rdquo; do</p>

<pre><code>it { should not be_valid }
specify { @user.save.should == false }
</code></pre>

<p>  end</p>

<p>  context &ldquo;when name not empty&rdquo; do</p>

<pre><code>before { @user.name = 'Sam' }

it { should be_valid }
specify { @user.save.should == true }
</code></pre>

<p>  end</p>

<p>  describe :present do</p>

<pre><code>subject { @user.present }

context "when user is a W" do
  before { @user.gender = 'W' }

  it { should be_a Flower }
end

context "when user is a M" do
  before { @user.gender = 'M' }

  it { should be_an IMac }
end
</code></pre>

<p>  end
end
```</p>

<h2>Test Valid, Edge and Invalid cases</h2>

<p>This is called <em>Boundary value analysis</em>, it&rsquo;s simple and it will help you to cover the most important cases. Just split-up method&rsquo;s input or object&rsquo;s attributes into valid and invalid partitions and test both of them and there boundaries. A method specification might look like that:</p>

<p>```ruby
describe &ldquo;#month_in_english(month_id)&rdquo; do
  context &ldquo;when valid&rdquo; do</p>

<pre><code>it "should return 'January' for 1" # lower boundary
it "should return 'March' for 3"
it "should return 'December' for 12" # upper boundary
</code></pre>

<p>  context &ldquo;when invalid&rdquo; do</p>

<pre><code>it "should return nil for 0"
it "should return nil for 13"
</code></pre>

<p>  end
end
```</p>

<p>I hope this will help you improve your specs. Let me know if I missed anything! :)</p>

<p>You could also be interested in <a href="http://eggsonbread.com/2010/09/06/my-cucumber-best-practices-and-tips/">(My) Cucumber best practices and tips</a> or <a href="https://github.com/pcreux/rspec-set">rspec-set</a> a little gem that helps you speeding up your model specs.</p>
]]></content>
  </entry>
  
</feed>
