<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cucumber | Philippe Creux Weblog]]></title>
  <link href="http://pcreux.com/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://pcreux.com/"/>
  <updated>2013-11-20T16:27:30-08:00</updated>
  <id>http://pcreux.com/</id>
  <author>
    <name><![CDATA[Philippe Creux]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[(My) Cucumber best practices and tips]]></title>
    <link href="http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips/"/>
    <updated>2010-09-06T21:55:21-07:00</updated>
    <id>http://pcreux.com/2010/09/06/my-cucumber-best-practices-and-tips</id>
    <content type="html"><![CDATA[<p>After <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>, I&rsquo;m happy to share my Cucumber best practices and tips!</p>

<p>This article will help you organize, clarify and reduce the size of your cucumber scenarios.</p>

<h2>1. Organize your garden</h2>

<p>Keep your feature files organized by grouping them by business object, then action and context if any.  I put all the feature files in the same directory. For instance:</p>

<p><code>
bank_account_add.feature
bank_account_delete.feature
user_signup.feature
user_signup_when_invited.feature
user_login.feature
</code></p>

<p>The steps specific to the application should be organized by business object as well (<code>bank_account_steps.rb</code>, <code>user_steps.rb</code>&hellip;). Keep the file organized grouping the steps by <code>Given</code> / <code>When</code> / <code>Then</code>.</p>

<p>Do not overload the files generated by Cucumber like <code>step_definitions/web_steps.rb</code> and <code>support/env.rb</code> with your own steps, helpers or setup code. These files are likely to get overwritten when you update Cucumber so store your stuff in your own files.</p>

<h2>2. Custom steps make your scenario DRY and accessible</h2>

<p>Scenarios should have the same lifecyle as your code: Red, Green, <strong>Refactor</strong> to make them DRY and easy to read.</p>

<p>Group multiple steps together. For instance:
<code>ruby
  Given I follow "Send money"
  When I fill in "Email" with "mukmuk@example.com"
  And I fill in "Amount" with "10"
  And I select "Bank account" from "Source"
  And I press "Send"
  Then I should see "You've sent $10 to mukmuk@example.com"
</code>
&hellip; could be refactored to:
<code>ruby
  Given I send "$10" to "mukmuk@example.com" from my "Bank account"
</code></p>

<p>This step definition is the following:
```ruby
  Given %{I send &ldquo;$amount&rdquo; to &ldquo;$email&rdquo; from my &ldquo;$source&rdquo;} do |amount, email, source|</p>

<pre><code>Given %{I follow "Send money"}
When %{I fill in "Email" with "#{email}"}
And %{I fill in "Amount" with "#{amount.delete('$')}"}
And %{I select "#{source}" from "Source"}
And %{I press "Send"}
Then %{I should see "You've sent $#{amount} to #{email}"}
</code></pre>

<p>  end
```</p>

<p>This step can then be easily reused in other scenario keeping your features DRY. It also decouples the scenario from the UI so that you won&rsquo;t have to change dozens of feature files when the UX guru changes translations or user flows.</p>

<h2>3. Background: setup the DRY way</h2>

<p>Make the feature focus on one business object/action/context and the <a href="http://wiki.github.com/aslakhellesoy/cucumber/background">background</a> will get longer than the scenarios.</p>

<p>```cucumber
  Feature: A user can cancel a transaction unless it&rsquo;s claimed by the recipient</p>

<pre><code>Background:
  Given I am logged in
  And I send "$10" to "mukmuk@example.com" from my "Bank account"

Scenario: I can cancel as long as the payment is not claimed
  When I cancel my latest transaction
  Then I should see a cancellation confirmation

Scenario: I can't cancel once the payment is claimed
  Given "Mukmuk" claimed the latest transaction
  Then I can't cancel my latest transaction
</code></pre>

<p>```</p>

<h2>4. Scenario outlines: scenario with variables!</h2>

<p>A <a href="http://wiki.github.com/aslakhellesoy/cucumber/scenario-outlines">scenario outline</a> contains variables allowing you to test multiple context using a truth table. For instance I use them to make sure that validation errors are displayed properly:</p>

<p>```cucumber
  Scenario Outline: Add invalid bank account displays inline errors</p>

<pre><code>Given I follow "Add Bank Account"
When I fill in "&lt;field&gt;" with "&lt;value&gt;"
And I press "Add Bank Account"
And I should see the inline error "&lt;error&gt;" for "&lt;field&gt;"

Examples:
  | field   | value         | error                    |
  | Account |               | Can't be blank           |
  | Account | Sixty five    | Should be 1 to 12 digits |
  | Account | 1234567890123 | Should be 1 to 12 digits |
</code></pre>

<p>```</p>

<h2>5. Multi-line step arguments: give your step a table for lunch!</h2>

<p>A step can take a <a href="http://wiki.github.com/aslakhellesoy/cucumber/multiline-step-arguments">multi-line table as an argument</a>. This is a great way to load up a bunch of data or to test the rendering of lists and tables. For instance:</p>

<p>```cucumber
  Given I sent &ldquo;$25&rdquo; to &ldquo;<a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x6d;&#117;&#x6b;&#x6d;&#117;&#x6b;&#64;&#x65;&#x78;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#99;&#111;&#x6d;">&#x6d;&#x75;&#x6b;&#x6d;&#117;&#107;&#x40;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#109;</a>&rdquo; from my &ldquo;Bank account&rdquo;
  Then I should see the following transaction history:</p>

<pre><code>| create     | complete    |
| deposit    | in_progress |
| transfer   | pending     |
| withdrawal | pending     |
</code></pre>

<p>```</p>

<p>The step definition looks like the following:</p>

<p>```cucumber
  Then &ldquo;I should see the following transaction history:&rdquo; do |table|</p>

<pre><code>table.raw.each do |event, state|
  page.should have_css("tr.#{event}.#{state}")
end
</code></pre>

<p>  end
```</p>

<p>I hope that these tips will help you growing healthy cucumber features!</p>

<p>Want more? Check out the <a href="http://wiki.github.com/aslakhellesoy/cucumber/">Cucumber wiki</a>, <a href="http://www.engineyard.com/blog/2009/15-expert-tips-for-using-cucumber/">15 Expert Tips for Using Cucumber</a> by <a href="http://www.engineyard.com/blog/author/daveastels/">Dave Astels</a>, <a href="http://elabs.se/blog/15-you-re-cuking-it-wrong">You&rsquo;re Cuking It Wrong</a> by <a href="http://elabs.se/">Elabs</a> and <a href="http://antonymarcano.com/blog/2010/08/youre-almost-cuking-it/">You’re almost cuking it…</a> by <a href="http://antonymarcano.com/Site/Home.html">Antony Marcano</a>. You could also like <a href="http://eggsonbread.com/2010/03/28/my-rspec-best-practices-and-tips/">(My) RSpec best practices and tips</a>. :)</p>

<p>Happy BDD!</p>

<blockquote><p>Thanks to <a href="http://wwww.21croissants.com/">Jean-Michel Garnier</a> for reviewing this article.</p></blockquote>
]]></content>
  </entry>
  
</feed>
